import {
  type CheckResult,
  type RevokeResult,
  type SendOptions,
  type SendResult,
  type StatusResult,
} from "./types.js";

export class TelegramGateway {
  private readonly API_TOKEN: string;
  private readonly API_URL: string = "https://gatewayapi.telegram.org";

  /**
   * Initializes Telegram Gateway client.
   * @param apiToken - Grab it in [here](https://gateway.telegram.org/account/api)
   */
  constructor(private readonly apiToken: string) {
    this.API_TOKEN = apiToken;
  }

  /**
   * Use this method to send a verification message. Charges will apply according to the pricing plan for each successful message delivery. Note that this method is always free of charge when used to send codes to your own phone number.
   * @param number
   * @returns
   */
  async checkSend(number: string): Promise<CheckResult> {
    const response = await this.fetch("/checkSendAbility", {
      phone_number: number,
    });
    if (!response.ok) {
      return {
        success: false,
        error: response.error,
        number,
      };
    }
    return {
      success: true,
      request_id: response.result.request_id,
      number: response.result.phone_number,
    };
  }

  /**
   * Use this method to send a verification message. Charges will apply according to the pricing plan for each successful message delivery. Note that this method is always free of charge when used to send codes to your own phone number.
   * NOTE: Use returned `request_id` from `checkSend` for free of charge.
   * @param sendOpts
   */
  async send(sendOpts: SendOptions): Promise<SendResult> {
    if (!sendOpts.request_id && !sendOpts.phone_number) {
      throw new Error("request_id or phone_number is required");
    }

    sendOpts.code_length ||= 4; // default code length

    const response = await this.fetch("/sendVerificationMessage", sendOpts);
    if (!response.ok) {
      return {
        success: false,
        error: response.error,
      };
    }
    return {
      success: true,
      request_id: response.result.request_id,
      number: response.result.phone_number,
      request_cost: response.result.request_cost,
      remaining_balance: response.result.remaining_balance,
    };
  }

  /**
   * Use this method to check the status of a verification message that was sent previously. If the code was generated by Telegram for you, you can also verify the correctness of the code entered by the user using this method. Even if you set the code yourself, it is recommended to call this method after the user has successfully entered the code, passing the correct code in the code parameter, so that we can track the conversion rate of your verifications.
   * @param request_id
   * @param code
   * @returns
   */
  async checkStatus(request_id: string, code?: string): Promise<StatusResult> {
    const response = await this.fetch("/checkVerificationStatus", {
      request_id,
      code,
    });
    return response.result;
  }

  /**
   * Use this method to revoke a verification message that was sent previously. Returns True if the revocation request was received. However, this does not guarantee that the message will be deleted. For example, if the message has already been delivered or read, it will not be removed.
   * @param request_id
   * @returns
   */
  async revoke(request_id: string): Promise<RevokeResult> {
    const response = await this.fetch("/revokeVerificationMessage", {
      request_id,
    });
    if (!response.ok) {
      return { success: false, error: response.error };
    }
    return response.ok && response.result;
  }

  /** minimal middle-ware like  fetch */
  private async fetch(url: string, data: any, method: "POST" | "GET" = "POST") {
    const response = await fetch(`${this.API_URL}${url}`, {
      method,
      body: JSON.stringify(data),
      headers: {
        Authorization: `Bearer ${this.API_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
    return response.json();
  }
}
